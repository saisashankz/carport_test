{"ast":null,"code":"// src/services/orderService.js\nimport { collection, addDoc, updateDoc, doc, getDocs, query, where, orderBy } from 'firebase/firestore';\nimport { db } from '../firebase';\nexport const orderService = {\n  // Create order in Firebase\n  async createOrder(orderData) {\n    try {\n      console.log('üìù Creating order in Firebase:', orderData);\n      const orderNumber = `CP-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\n      const order = {\n        ...orderData,\n        orderNumber,\n        status: 'pending',\n        paymentStatus: 'pending',\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      const docRef = await addDoc(collection(db, 'orders'), order);\n      console.log('‚úÖ Order created in Firebase:', orderNumber);\n      return {\n        success: true,\n        id: docRef.id,\n        orderNumber,\n        ...order\n      };\n    } catch (error) {\n      console.error('‚ùå Failed to create order:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Update order after payment\n  async updateOrderPayment(orderId, paymentData) {\n    try {\n      console.log('üí≥ Updating order payment:', orderId, paymentData);\n      const docRef = doc(db, 'orders', orderId);\n      await updateDoc(docRef, {\n        status: 'confirmed',\n        paymentStatus: 'paid',\n        payment: {\n          method: 'razorpay',\n          paymentId: paymentData.paymentId,\n          orderId: paymentData.orderId,\n          signature: paymentData.signature,\n          paidAt: new Date()\n        },\n        updatedAt: new Date()\n      });\n      console.log('‚úÖ Order payment updated successfully');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('‚ùå Failed to update order payment:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Get user orders\n  async getUserOrders(userId) {\n    try {\n      console.log('üìã Fetching orders for user:', userId);\n      const q = query(collection(db, 'orders'), where('userId', '==', userId), orderBy('createdAt', 'desc'));\n      const querySnapshot = await getDocs(q);\n      const orders = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log(`‚úÖ Fetched ${orders.length} orders for user`);\n      return orders;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch user orders:', error);\n      return [];\n    }\n  }\n};","map":{"version":3,"names":["collection","addDoc","updateDoc","doc","getDocs","query","where","orderBy","db","orderService","createOrder","orderData","console","log","orderNumber","Date","getFullYear","String","now","slice","order","status","paymentStatus","createdAt","updatedAt","docRef","success","id","error","message","updateOrderPayment","orderId","paymentData","payment","method","paymentId","signature","paidAt","getUserOrders","userId","q","querySnapshot","orders","docs","map","data","length"],"sources":["C:/Users/Neoz/OneDrive/Documents/Claude Firebase/carpore-store/src/services/orderService.js"],"sourcesContent":["// src/services/orderService.js\r\nimport { collection, addDoc, updateDoc, doc, getDocs, query, where, orderBy } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nexport const orderService = {\r\n  // Create order in Firebase\r\n  async createOrder(orderData) {\r\n    try {\r\n      console.log('üìù Creating order in Firebase:', orderData);\r\n      \r\n      const orderNumber = `CP-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\r\n      \r\n      const order = {\r\n        ...orderData,\r\n        orderNumber,\r\n        status: 'pending',\r\n        paymentStatus: 'pending',\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n      \r\n      const docRef = await addDoc(collection(db, 'orders'), order);\r\n      \r\n      console.log('‚úÖ Order created in Firebase:', orderNumber);\r\n      return { \r\n        success: true, \r\n        id: docRef.id, \r\n        orderNumber, \r\n        ...order \r\n      };\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to create order:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Update order after payment\r\n  async updateOrderPayment(orderId, paymentData) {\r\n    try {\r\n      console.log('üí≥ Updating order payment:', orderId, paymentData);\r\n      \r\n      const docRef = doc(db, 'orders', orderId);\r\n      await updateDoc(docRef, {\r\n        status: 'confirmed',\r\n        paymentStatus: 'paid',\r\n        payment: {\r\n          method: 'razorpay',\r\n          paymentId: paymentData.paymentId,\r\n          orderId: paymentData.orderId,\r\n          signature: paymentData.signature,\r\n          paidAt: new Date()\r\n        },\r\n        updatedAt: new Date()\r\n      });\r\n      \r\n      console.log('‚úÖ Order payment updated successfully');\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to update order payment:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Get user orders\r\n  async getUserOrders(userId) {\r\n    try {\r\n      console.log('üìã Fetching orders for user:', userId);\r\n      \r\n      const q = query(\r\n        collection(db, 'orders'),\r\n        where('userId', '==', userId),\r\n        orderBy('createdAt', 'desc')\r\n      );\r\n      \r\n      const querySnapshot = await getDocs(q);\r\n      const orders = querySnapshot.docs.map(doc => ({ \r\n        id: doc.id, \r\n        ...doc.data() \r\n      }));\r\n      \r\n      console.log(`‚úÖ Fetched ${orders.length} orders for user`);\r\n      return orders;\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch user orders:', error);\r\n      return [];\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}