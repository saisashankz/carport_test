{"ast":null,"code":"// src/services/orderService.js\nimport { collection, addDoc, updateDoc, doc, getDocs, query, where, orderBy } from 'firebase/firestore';\nimport { db } from '../firebase';\nexport const orderService = {\n  // Create order in Firebase (simplified)\n  async createOrder(orderData) {\n    try {\n      var _orderData$customer, _orderData$customer2, _orderData$customer3, _orderData$customer4;\n      console.log('üìù Creating order in Firebase:', orderData);\n      const orderNumber = `CP-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\n\n      // Simplified order structure to avoid validation issues\n      const order = {\n        orderNumber,\n        userId: orderData.userId,\n        status: 'pending',\n        paymentStatus: 'pending',\n        // Order items\n        items: orderData.items || [],\n        // Pricing (ensure all are numbers)\n        subtotal: Number(orderData.subtotal) || 0,\n        tax: Number(orderData.tax) || 0,\n        shipping: Number(orderData.shipping) || 0,\n        total: Number(orderData.total) || 0,\n        // Customer info\n        customerName: `${((_orderData$customer = orderData.customer) === null || _orderData$customer === void 0 ? void 0 : _orderData$customer.firstName) || ''} ${((_orderData$customer2 = orderData.customer) === null || _orderData$customer2 === void 0 ? void 0 : _orderData$customer2.lastName) || ''}`.trim(),\n        customerEmail: ((_orderData$customer3 = orderData.customer) === null || _orderData$customer3 === void 0 ? void 0 : _orderData$customer3.email) || '',\n        customerPhone: ((_orderData$customer4 = orderData.customer) === null || _orderData$customer4 === void 0 ? void 0 : _orderData$customer4.phone) || '',\n        // Address (simplified)\n        shippingAddress: orderData.shippingAddress ? {\n          street: orderData.shippingAddress.street || '',\n          city: orderData.shippingAddress.city || '',\n          state: orderData.shippingAddress.state || '',\n          pincode: orderData.shippingAddress.pincode || '',\n          country: orderData.shippingAddress.country || 'India'\n        } : {},\n        // Timestamps\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      console.log('üìù Final order object:', order);\n      const docRef = await addDoc(collection(db, 'orders'), order);\n      console.log('‚úÖ Order created in Firebase with ID:', docRef.id);\n      return {\n        success: true,\n        id: docRef.id,\n        orderNumber,\n        ...order\n      };\n    } catch (error) {\n      console.error('‚ùå Failed to create order:', error);\n      console.error('‚ùå Error details:', error.message);\n      console.error('‚ùå Error code:', error.code);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Update order after payment (simplified)\n  async updateOrderPayment(orderId, paymentData) {\n    try {\n      console.log('üí≥ Updating order payment:', orderId, paymentData);\n      const docRef = doc(db, 'orders', orderId);\n      const updateData = {\n        status: 'confirmed',\n        paymentStatus: 'paid',\n        paymentId: paymentData.paymentId || '',\n        razorpayOrderId: paymentData.orderId || '',\n        paymentSignature: paymentData.signature || '',\n        paidAt: new Date(),\n        updatedAt: new Date()\n      };\n      await updateDoc(docRef, updateData);\n      console.log('‚úÖ Order payment updated successfully');\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('‚ùå Failed to update order payment:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Get user orders (simplified query)\n  async getUserOrders(userId) {\n    try {\n      console.log('üìã Fetching orders for user:', userId);\n\n      // Simple query without orderBy to avoid index issues\n      const q = query(collection(db, 'orders'), where('userId', '==', userId));\n      const querySnapshot = await getDocs(q);\n      const orders = querySnapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n\n      // Sort in JavaScript instead of Firestore\n      orders.sort((a, b) => {\n        var _a$createdAt, _a$createdAt$toDate, _b$createdAt, _b$createdAt$toDate;\n        const aTime = ((_a$createdAt = a.createdAt) === null || _a$createdAt === void 0 ? void 0 : (_a$createdAt$toDate = _a$createdAt.toDate) === null || _a$createdAt$toDate === void 0 ? void 0 : _a$createdAt$toDate.call(_a$createdAt)) || new Date(a.createdAt) || new Date();\n        const bTime = ((_b$createdAt = b.createdAt) === null || _b$createdAt === void 0 ? void 0 : (_b$createdAt$toDate = _b$createdAt.toDate) === null || _b$createdAt$toDate === void 0 ? void 0 : _b$createdAt$toDate.call(_b$createdAt)) || new Date(b.createdAt) || new Date();\n        return bTime - aTime;\n      });\n      console.log(`‚úÖ Fetched ${orders.length} orders for user`);\n      return orders;\n    } catch (error) {\n      console.error('‚ùå Failed to fetch user orders:', error);\n      return [];\n    }\n  }\n};","map":{"version":3,"names":["collection","addDoc","updateDoc","doc","getDocs","query","where","orderBy","db","orderService","createOrder","orderData","_orderData$customer","_orderData$customer2","_orderData$customer3","_orderData$customer4","console","log","orderNumber","Date","getFullYear","String","now","slice","order","userId","status","paymentStatus","items","subtotal","Number","tax","shipping","total","customerName","customer","firstName","lastName","trim","customerEmail","email","customerPhone","phone","shippingAddress","street","city","state","pincode","country","createdAt","updatedAt","docRef","id","success","error","message","code","updateOrderPayment","orderId","paymentData","updateData","paymentId","razorpayOrderId","paymentSignature","signature","paidAt","getUserOrders","q","querySnapshot","orders","docs","map","data","sort","a","b","_a$createdAt","_a$createdAt$toDate","_b$createdAt","_b$createdAt$toDate","aTime","toDate","call","bTime","length"],"sources":["/Users/sunkarisashank/Desktop/Claude Firebase/carpore-store/src/services/orderService.js"],"sourcesContent":["// src/services/orderService.js\r\nimport { collection, addDoc, updateDoc, doc, getDocs, query, where, orderBy } from 'firebase/firestore';\r\nimport { db } from '../firebase';\r\n\r\nexport const orderService = {\r\n  // Create order in Firebase (simplified)\r\n  async createOrder(orderData) {\r\n    try {\r\n      console.log('üìù Creating order in Firebase:', orderData);\r\n      \r\n      const orderNumber = `CP-${new Date().getFullYear()}-${String(Date.now()).slice(-6)}`;\r\n      \r\n      // Simplified order structure to avoid validation issues\r\n      const order = {\r\n        orderNumber,\r\n        userId: orderData.userId,\r\n        status: 'pending',\r\n        paymentStatus: 'pending',\r\n        \r\n        // Order items\r\n        items: orderData.items || [],\r\n        \r\n        // Pricing (ensure all are numbers)\r\n        subtotal: Number(orderData.subtotal) || 0,\r\n        tax: Number(orderData.tax) || 0,\r\n        shipping: Number(orderData.shipping) || 0,\r\n        total: Number(orderData.total) || 0,\r\n        \r\n        // Customer info\r\n        customerName: `${orderData.customer?.firstName || ''} ${orderData.customer?.lastName || ''}`.trim(),\r\n        customerEmail: orderData.customer?.email || '',\r\n        customerPhone: orderData.customer?.phone || '',\r\n        \r\n        // Address (simplified)\r\n        shippingAddress: orderData.shippingAddress ? {\r\n          street: orderData.shippingAddress.street || '',\r\n          city: orderData.shippingAddress.city || '',\r\n          state: orderData.shippingAddress.state || '',\r\n          pincode: orderData.shippingAddress.pincode || '',\r\n          country: orderData.shippingAddress.country || 'India'\r\n        } : {},\r\n        \r\n        // Timestamps\r\n        createdAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n      \r\n      console.log('üìù Final order object:', order);\r\n      \r\n      const docRef = await addDoc(collection(db, 'orders'), order);\r\n      \r\n      console.log('‚úÖ Order created in Firebase with ID:', docRef.id);\r\n      return { \r\n        success: true, \r\n        id: docRef.id, \r\n        orderNumber, \r\n        ...order \r\n      };\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to create order:', error);\r\n      console.error('‚ùå Error details:', error.message);\r\n      console.error('‚ùå Error code:', error.code);\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Update order after payment (simplified)\r\n  async updateOrderPayment(orderId, paymentData) {\r\n    try {\r\n      console.log('üí≥ Updating order payment:', orderId, paymentData);\r\n      \r\n      const docRef = doc(db, 'orders', orderId);\r\n      const updateData = {\r\n        status: 'confirmed',\r\n        paymentStatus: 'paid',\r\n        paymentId: paymentData.paymentId || '',\r\n        razorpayOrderId: paymentData.orderId || '',\r\n        paymentSignature: paymentData.signature || '',\r\n        paidAt: new Date(),\r\n        updatedAt: new Date()\r\n      };\r\n      \r\n      await updateDoc(docRef, updateData);\r\n      \r\n      console.log('‚úÖ Order payment updated successfully');\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to update order payment:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Get user orders (simplified query)\r\n  async getUserOrders(userId) {\r\n    try {\r\n      console.log('üìã Fetching orders for user:', userId);\r\n      \r\n      // Simple query without orderBy to avoid index issues\r\n      const q = query(\r\n        collection(db, 'orders'),\r\n        where('userId', '==', userId)\r\n      );\r\n      \r\n      const querySnapshot = await getDocs(q);\r\n      const orders = querySnapshot.docs.map(doc => ({ \r\n        id: doc.id, \r\n        ...doc.data() \r\n      }));\r\n      \r\n      // Sort in JavaScript instead of Firestore\r\n      orders.sort((a, b) => {\r\n        const aTime = a.createdAt?.toDate?.() || new Date(a.createdAt) || new Date();\r\n        const bTime = b.createdAt?.toDate?.() || new Date(b.createdAt) || new Date();\r\n        return bTime - aTime;\r\n      });\r\n      \r\n      console.log(`‚úÖ Fetched ${orders.length} orders for user`);\r\n      return orders;\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to fetch user orders:', error);\r\n      return [];\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}