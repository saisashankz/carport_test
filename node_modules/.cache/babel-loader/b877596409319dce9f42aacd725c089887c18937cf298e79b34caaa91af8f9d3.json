{"ast":null,"code":"// src/services/razorpayService.js\nexport const razorpayService = {\n  // Load Razorpay script\n  async loadRazorpayScript() {\n    return new Promise(resolve => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.onload = () => {\n        console.log('‚úÖ Razorpay script loaded successfully');\n        resolve(true);\n      };\n      script.onerror = () => {\n        console.error('‚ùå Failed to load Razorpay script');\n        resolve(false);\n      };\n      document.body.appendChild(script);\n    });\n  },\n  // Create demo payment order (frontend only)\n  async createDemoPaymentOrder(orderData) {\n    try {\n      console.log('üí≥ Creating demo payment order (frontend mode):', orderData);\n\n      // In demo mode, we simulate the order creation\n      // In production, this would be done by your backend\n      const demoOrderId = `order_demo_${Date.now()}`;\n      console.log('‚úÖ Demo payment order created:', demoOrderId);\n      return {\n        success: true,\n        orderId: demoOrderId,\n        amount: Math.round(orderData.amount * 100),\n        // Convert to paise\n        currency: 'INR'\n      };\n    } catch (error) {\n      console.error('‚ùå Failed to create demo payment order:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  },\n  // Process payment with demo mode\n  async processPayment(paymentData, onSuccess, onError) {\n    try {\n      console.log('ÔøΩ Starting demo payment simulation...');\n      console.log('üí° Demo Mode: Simulating payment without Razorpay API calls');\n\n      // In true demo mode, simulate payment success after a short delay\n      setTimeout(() => {\n        console.log('‚úÖ Demo payment completed successfully!');\n\n        // Simulate a successful payment response\n        const demoResponse = {\n          paymentId: `pay_demo_${Date.now()}`,\n          orderId: paymentData.orderId,\n          signature: `demo_signature_${Date.now()}`,\n          amount: paymentData.amount,\n          currency: paymentData.currency || 'INR'\n        };\n        console.log('üí≥ Demo payment response:', demoResponse);\n        onSuccess(demoResponse);\n      }, 2000); // 2 second delay to simulate processing\n\n      // Show a demo notification\n      if (window.confirm(`üé≠ DEMO MODE\\n\\nSimulating payment for ‚Çπ${(paymentData.amount / 100).toFixed(2)}\\n\\nClick OK to proceed with demo payment, Cancel to abort.`)) {\n        console.log('‚úÖ User confirmed demo payment');\n      } else {\n        console.log('‚ö†Ô∏è User cancelled demo payment');\n        onError(new Error('Payment cancelled by user'));\n      }\n    } catch (error) {\n      console.error('‚ùå Demo payment processing error:', error);\n      onError(error);\n    }\n  },\n  // Alternative method for actual Razorpay integration (when not in demo mode)\n  async processRealPayment(paymentData, onSuccess, onError) {\n    try {\n      console.log('ÔøΩüîÑ Loading Razorpay...');\n      const isLoaded = await this.loadRazorpayScript();\n      if (!isLoaded) {\n        throw new Error('Razorpay SDK failed to load. Please check your internet connection.');\n      }\n      console.log('üöÄ Opening Razorpay checkout...');\n      const options = {\n        key: process.env.REACT_APP_RAZORPAY_KEY_ID,\n        amount: paymentData.amount,\n        // Amount in paise\n        currency: paymentData.currency || 'INR',\n        name: 'CarPore',\n        description: 'Premium Air Fresheners',\n        image: '/logo192.png',\n        order_id: paymentData.orderId,\n        // Use this for real payments\n        handler: function (response) {\n          console.log('‚úÖ Payment successful:', response);\n          onSuccess({\n            paymentId: response.razorpay_payment_id,\n            orderId: response.razorpay_order_id,\n            signature: response.razorpay_signature\n          });\n        },\n        prefill: {\n          name: paymentData.customerName || '',\n          email: paymentData.customerEmail || '',\n          contact: paymentData.customerPhone || ''\n        },\n        notes: {\n          address: paymentData.address || 'CarPore Customer'\n        },\n        theme: {\n          color: '#FBBF24' // CarPore yellow color\n        },\n        modal: {\n          ondismiss: function () {\n            console.log('‚ö†Ô∏è Payment cancelled by user');\n            onError(new Error('Payment cancelled by user'));\n          }\n        }\n      };\n      const rzp = new window.Razorpay(options);\n      rzp.open();\n    } catch (error) {\n      console.error('‚ùå Payment processing error:', error);\n      onError(error);\n    }\n  },\n  // Verify payment (demo mode)\n  async verifyPayment(paymentData) {\n    try {\n      console.log('üîç Verifying payment (Demo Mode):', paymentData);\n\n      // In demo mode, we always return success\n      // In production, this would verify the payment signature on your backend\n      console.log('‚úÖ Payment verification successful (Demo Mode)');\n      return {\n        verified: true,\n        mode: 'demo',\n        message: 'Payment verified in demo mode'\n      };\n    } catch (error) {\n      console.error('‚ùå Error verifying payment:', error);\n      return {\n        verified: false,\n        error: error.message\n      };\n    }\n  }\n};","map":{"version":3,"names":["razorpayService","loadRazorpayScript","Promise","resolve","script","document","createElement","src","onload","console","log","onerror","error","body","appendChild","createDemoPaymentOrder","orderData","demoOrderId","Date","now","success","orderId","amount","Math","round","currency","message","processPayment","paymentData","onSuccess","onError","setTimeout","demoResponse","paymentId","signature","window","confirm","toFixed","Error","processRealPayment","isLoaded","options","key","process","env","REACT_APP_RAZORPAY_KEY_ID","name","description","image","order_id","handler","response","razorpay_payment_id","razorpay_order_id","razorpay_signature","prefill","customerName","email","customerEmail","contact","customerPhone","notes","address","theme","color","modal","ondismiss","rzp","Razorpay","open","verifyPayment","verified","mode"],"sources":["C:/Users/Neoz/OneDrive/Documents/Claude Firebase/carpore-store/src/services/razorpayService.js"],"sourcesContent":["// src/services/razorpayService.js\r\nexport const razorpayService = {\r\n  // Load Razorpay script\r\n  async loadRazorpayScript() {\r\n    return new Promise((resolve) => {\r\n      const script = document.createElement('script');\r\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\r\n      script.onload = () => {\r\n        console.log('‚úÖ Razorpay script loaded successfully');\r\n        resolve(true);\r\n      };\r\n      script.onerror = () => {\r\n        console.error('‚ùå Failed to load Razorpay script');\r\n        resolve(false);\r\n      };\r\n      document.body.appendChild(script);\r\n    });\r\n  },\r\n\r\n  // Create demo payment order (frontend only)\r\n  async createDemoPaymentOrder(orderData) {\r\n    try {\r\n      console.log('üí≥ Creating demo payment order (frontend mode):', orderData);\r\n      \r\n      // In demo mode, we simulate the order creation\r\n      // In production, this would be done by your backend\r\n      const demoOrderId = `order_demo_${Date.now()}`;\r\n      \r\n      console.log('‚úÖ Demo payment order created:', demoOrderId);\r\n      return {\r\n        success: true,\r\n        orderId: demoOrderId,\r\n        amount: Math.round(orderData.amount * 100), // Convert to paise\r\n        currency: 'INR'\r\n      };\r\n    } catch (error) {\r\n      console.error('‚ùå Failed to create demo payment order:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  },\r\n\r\n  // Process payment with demo mode\r\n  async processPayment(paymentData, onSuccess, onError) {\r\n    try {\r\n      console.log('ÔøΩ Starting demo payment simulation...');\r\n      console.log('üí° Demo Mode: Simulating payment without Razorpay API calls');\r\n\r\n      // In true demo mode, simulate payment success after a short delay\r\n      setTimeout(() => {\r\n        console.log('‚úÖ Demo payment completed successfully!');\r\n        \r\n        // Simulate a successful payment response\r\n        const demoResponse = {\r\n          paymentId: `pay_demo_${Date.now()}`,\r\n          orderId: paymentData.orderId,\r\n          signature: `demo_signature_${Date.now()}`,\r\n          amount: paymentData.amount,\r\n          currency: paymentData.currency || 'INR'\r\n        };\r\n\r\n        console.log('üí≥ Demo payment response:', demoResponse);\r\n        onSuccess(demoResponse);\r\n      }, 2000); // 2 second delay to simulate processing\r\n\r\n      // Show a demo notification\r\n      if (window.confirm(`üé≠ DEMO MODE\\n\\nSimulating payment for ‚Çπ${(paymentData.amount / 100).toFixed(2)}\\n\\nClick OK to proceed with demo payment, Cancel to abort.`)) {\r\n        console.log('‚úÖ User confirmed demo payment');\r\n      } else {\r\n        console.log('‚ö†Ô∏è User cancelled demo payment');\r\n        onError(new Error('Payment cancelled by user'));\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Demo payment processing error:', error);\r\n      onError(error);\r\n    }\r\n  },\r\n\r\n  // Alternative method for actual Razorpay integration (when not in demo mode)\r\n  async processRealPayment(paymentData, onSuccess, onError) {\r\n    try {\r\n      console.log('ÔøΩüîÑ Loading Razorpay...');\r\n      \r\n      const isLoaded = await this.loadRazorpayScript();\r\n      if (!isLoaded) {\r\n        throw new Error('Razorpay SDK failed to load. Please check your internet connection.');\r\n      }\r\n\r\n      console.log('üöÄ Opening Razorpay checkout...');\r\n\r\n      const options = {\r\n        key: process.env.REACT_APP_RAZORPAY_KEY_ID,\r\n        amount: paymentData.amount, // Amount in paise\r\n        currency: paymentData.currency || 'INR',\r\n        name: 'CarPore',\r\n        description: 'Premium Air Fresheners',\r\n        image: '/logo192.png',\r\n        order_id: paymentData.orderId, // Use this for real payments\r\n        handler: function (response) {\r\n          console.log('‚úÖ Payment successful:', response);\r\n          onSuccess({\r\n            paymentId: response.razorpay_payment_id,\r\n            orderId: response.razorpay_order_id,\r\n            signature: response.razorpay_signature\r\n          });\r\n        },\r\n        prefill: {\r\n          name: paymentData.customerName || '',\r\n          email: paymentData.customerEmail || '',\r\n          contact: paymentData.customerPhone || ''\r\n        },\r\n        notes: {\r\n          address: paymentData.address || 'CarPore Customer'\r\n        },\r\n        theme: {\r\n          color: '#FBBF24' // CarPore yellow color\r\n        },\r\n        modal: {\r\n          ondismiss: function() {\r\n            console.log('‚ö†Ô∏è Payment cancelled by user');\r\n            onError(new Error('Payment cancelled by user'));\r\n          }\r\n        }\r\n      };\r\n\r\n      const rzp = new window.Razorpay(options);\r\n      rzp.open();\r\n    } catch (error) {\r\n      console.error('‚ùå Payment processing error:', error);\r\n      onError(error);\r\n    }\r\n  },\r\n\r\n  // Verify payment (demo mode)\r\n  async verifyPayment(paymentData) {\r\n    try {\r\n      console.log('üîç Verifying payment (Demo Mode):', paymentData);\r\n      \r\n      // In demo mode, we always return success\r\n      // In production, this would verify the payment signature on your backend\r\n      console.log('‚úÖ Payment verification successful (Demo Mode)');\r\n      return { \r\n        verified: true, \r\n        mode: 'demo',\r\n        message: 'Payment verified in demo mode'\r\n      };\r\n    } catch (error) {\r\n      console.error('‚ùå Error verifying payment:', error);\r\n      return { verified: false, error: error.message };\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}